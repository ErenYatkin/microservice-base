#!/usr/bin/env node

/**
 * Module dependencies.
 */
require('dotenv-flow').config();
const express = require('express');
const loaders = require('../loaders');
const milddlewares = require('../milddlewares');
const gracefulShutdown = require('../utils/gracefulShutdown');
const logger = require('../utils/logger');
const config = require('../../config');

const port = config.PORT;
const applicationServer = express();

milddlewares({ applicationServer });
applicationServer.disable('etag');

const { httpServer } = loaders.init({ applicationServer });

gracefulShutdown({ applicationServer: httpServer });

/**
 * Event listener for HTTP httpServer "listening" event.
 */

function onListening() {
    const addr = httpServer.address();
    const bind = typeof addr === 'string' ? `pipe ${addr}` : `port ${addr.port}`;
    logger.info('HTTP Server listening', { port: bind });
}

/**
 * Get port from environment and store in Express.
 */

applicationServer.set('port', port);

/**
 * Event listener for HTTP httpServer "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    const bind = typeof port === 'string' ? `Pipe ${port}` : `Port ${port}`;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            logger.error(`${bind} requires elevated privileges`);
            process.exit(1);
            break;
        case 'EADDRINUSE':
            logger.error(`${bind} is already in use`);
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Listen on provided port, on all network interfaces.
 */

httpServer.listen(port);
httpServer.on('error', onError);
httpServer.on('listening', onListening);
